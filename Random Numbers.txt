/* Code by Pranjal Rai : @Ashtam_Swar */
#include <bits/stdc++.h>
using namespace std;
#define ff first
#define ss second
#define pb push_back
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
const ll M=1e9+7;
ll inf=1e18;
string to_string(ll x){stringstream ss; ss<<x; return ss.str();}
ll to_integer(string s){stringstream ss(s); ll x; ss>>x; return x;}

ll n,root,in[100005],out[100005],a[100005],t;
vector<ll> v[100005];
ll bit[7][100005];
map<ll,ll> mp;

ll power(ll x,ll n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)
        return power((x*x)%M,n/2);
    else
        return (x*power((x*x)%M,(n-1)/2))%M;
}

void dfs(ll s)
{
    t++;
    in[s]=t;
    for(auto ch:v[s])
    {
        dfs(ch);
    }
    out[s]=t;
}

void update(ll x, ll del, ll i)
{
    for(;x<=n;x+=(x&-x))
        bit[i][x]+=del;
}

ll query(ll x, ll i)
{
    ll ans=0;
    for(;x>0;x-=(x&-x))
    {
        ans+=bit[i][x];
    }
    return ans;
}

int main()
{
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    cin>>n;
    for(ll i=1;i<n;i++)
    {
        ll x,y;
        cin>>x>>y;
        v[x+1].pb(y+1);
    }
    dfs(1);
    mp[2]=1;
    mp[3]=2;
    mp[5]=3;
    mp[7]=4;
    mp[11]=5;
    mp[13]=6;
    map<ll,ll>::iterator it;
    for(ll i=1;i<=n;i++)
    {
        cin>>a[i];
        for(it=mp.begin();it!=mp.end();it++)
        {
            ll x=it->ff;
            ll y=a[i],cnt=0;
            while(y%x==0)
            {
                cnt++;
                y/=x;
            }
            update(in[i],cnt,it->ss);
        }
    }
    ll q;
    cin>>q;
    while(q--)
    {
        string s;
        cin>>s;
        if(s=="RAND")
        {
            ll l;
            cin>>l;
            l++;
            ll mul=1,div=1;
            for(it=mp.begin();it!=mp.end();it++)
            {
                ll x=it->ff;
                ll val=query(out[l],it->ss)-query(in[l]-1,it->ss);
                mul=(mul*power(it->ff,val))%M;
                div=(div*(val+1LL))%M;
            }
            cout<<mul<<" "<<div<<"\n";
        }
        else
        {
            ll l,r;
            cin>>l>>r;
            l++;
            for(it=mp.begin();it!=mp.end();it++)
            {
                ll x=it->ff;
                ll y=r,cnt=0;
                while(y%x==0)
                {
                    cnt++;
                    y/=x;
                }
                update(in[l],cnt,it->ss);
            }
        }
    }
}


